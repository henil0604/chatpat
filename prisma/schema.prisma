datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  hasCompletedProfile Boolean   @default(false)
  username            String?
  role                UserRole  @default(USER)
  accounts            Account[]
  sessions            Session[]

  // LINK https://stackoverflow.com/questions/73942737/many-to-many-self-relation-prisma-one-field
  friends          User[] @relation("UserFriends")
  symmetricFriends User[] @relation("UserFriends")

  sentFriendRequests     FriendRequest[] @relation(name: "senderUser")
  receivedFriendRequests FriendRequest[] @relation(name: "receiverUser")
  Notification           Notification[]
}

model FriendRequest {
  id String @id @default(cuid())

  senderUser   User   @relation(name: "senderUser", fields: [senderUserId], references: [id])
  senderUserId String

  receiverUser   User   @relation(name: "receiverUser", fields: [receiverUserId], references: [id])
  receiverUserId String

  status FriendRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type NotificationType
  meta Json

  read Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  INCOMING_FRIEND_REQUEST
  OUTGOING_FRIEND_REQUEST_ACCEPTED
  OUTGOING_FRIEND_REQUEST_REJECTED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

enum UserRole {
  USER
  ADMIN
}
